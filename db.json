{ "Advanced" : 
    [
      { "ID":21,
      "Question":"What is the relationship between a class and an object?",
      "OptA": "A class defines the structure and behaviors of all entities of a given type",
      "OptB": "An object is one particular instance of that type of entity",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":22,
      "Question":"What is the difference between method overriding and method overloading?",
      "OptA": "Overriding occurs when the method signature is the same in the superclass and the child class",
      "OptB": "Overloading occurs when two or more methods in the same class have the same name but different parameters",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":23,
      "Question":"What are abstract classes?",
      "OptA": "Allow you to create blueprints for concrete classes.",
      "OptB": "A restricted class that cannot be used to create objects",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":24,
      "Question":"What is the difference between an abstract class and an interface?",
      "OptA": "An interface cannot have state",
      "OptB": "Abstract class can have state with instance variables",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":25,  
      "Question":"What is the difference between association, aggregation, and composition?",
      "OptA": "An association is known as composition when one object owns another",
      "OptB": "Association is known as aggregation when one object uses another object",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":26,
      "Question":"What is the single responsibility principle?",
      "OptA": "A class should have one and only one reason to change, meaning that a class should have only one job.",
      "OptB": "First principle of SOLID",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":27,
      "Question":"What is the open-closed principle?",
      "OptA": "Objects or entities should be open for extension but closed for modification.",
      "OptB": "Second principle of SOLID",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":28,
      "Question":"What is the Liskov Substitution Principle?",
      "OptA": "every subclass or derived class should be substitutable for its base or parent class.",
      "OptB": "Third principle of SOLID",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":29,
      "Question":"What is the interface segregation principle?",
      "OptA": "A client should never be forced to implement an interface that it does not use, or clients should not be forced to depend on methods they do not use.",
      "OptB": "Fourth principle of SOLID",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."
      },

    { "ID":30,
      "Question":"What is the dependency inversion principle?",
      "OptA": "Entities must depend on abstractions, not on concretions. It states that the high-level module must not depend on the low-level module, but they should depend on abstractions.",
      "OptB": "Fifth principle of SOLID",
      "OptC": "Neither a or b.",
      "OptD": "Both a and b.",
      "correctOpt": "Both a and b."}
  ]
}
